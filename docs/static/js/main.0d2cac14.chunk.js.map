{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/Header.js","components/GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","trim","length","cats","onSubmit","className","type","value","onChange","target","onClick","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","href","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","Header","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"sKAuCeA,EApCK,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEFC,mBAAS,IAFP,mBAE/BC,EAF+B,KAEnBC,EAFmB,KAWhCC,EAAe,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAKtB,OACI,mCACI,sBAAMO,SAAWN,EAAcO,UAAU,yBAAzC,SACI,sBAAKA,UAAU,kHAAf,UACI,uBAAOA,UAAU,qDACbC,KAAK,OACLC,MAAQX,EACRY,SArBM,SAACT,GAEvBF,EAAcE,EAAEU,OAAOF,UAqBX,wBAAQG,QAAUZ,EAAeO,UAAU,qBAA3C,SAAgE,mBAAGA,UAAU,uC,+BC/BpFM,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEZC,EAFY,iDAEqCC,UAAWH,GAFhD,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcbM,GAda,4CAAH,sDCiBLO,EAhBK,SAAC,GAAsB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAE9B,OACQ,sBAAKT,UAAU,6FAAf,UACI,qBAAKA,UAAU,mBAAf,SACI,qBAAKA,UAAU,qBAAqBuB,IAAMd,MAG9C,qBAAKT,UAAU,uBAAf,SACI,mBAAGwB,KAAMf,EAAKT,UAAU,uEAAxB,SAAiGmB,UCqBtGM,EA3BC,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECDN,SAAEA,GAAe,IAAD,EAEdjB,mBAAS,CAC/BwB,KAAM,GACNY,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAW,WAEPvB,EAASC,GAAWuB,MAAM,SAAAC,GACtBH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAKlB,CAAEnB,IAEEoB,EDfmBK,CAAczB,GAAhCO,EAHsB,EAGtBA,KAAMY,EAHgB,EAGhBA,QAId,OACI,qCACI,oBAAI1B,UAAU,2CAAd,SAA2DO,IAEzDmB,GAAW,yCAHjB,OAMQZ,EAAKE,KAAK,SAAAC,GAAG,OAET,cAAC,EAAD,eAEQA,GADEA,EAAIC,WEGnBe,EAvBA,WACX,OACI,cAAC,WAAD,UAEI,qBAAKjC,UAAU,iFAAf,SAEI,qBAAKA,UAAU,iDAAf,SAEI,oBAAIA,UAAU,0CAAd,iCC0BLkC,EA/BM,WAAO,IAAD,EAEa5C,mBAAS,CAAC,cAFvB,mBAEhB6C,EAFgB,KAEJ9C,EAFI,KASvB,OACI,eAAC,WAAD,WACI,cAAC,EAAD,IACA,sBAAKW,UAAU,oGAAf,UAEI,cAAC,EAAD,CAAaX,cAAgBA,IAC7B,uBACA,6BAEQ8C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAaA,GADLA,eCpBxC6B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.0d2cac14.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ( {setCategories} ) =>{\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n\r\n    \r\n    const handleInputChange = (e) => {\r\n        // console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 2){\r\n            setCategories( cats => [ inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return(\r\n        <>\r\n            <form onSubmit={ handleSubmit} className=\"container items-center\">\r\n                <div className=\"mb-8 px-6 py-3 border border-gray-200 border-opacity-75 rounded-lg shadow-lg w-full space-x-6 flex items-center\">\r\n                    <input className=\"w-full bg-transparent text-base focus:outline-none\"\r\n                        type=\"text\"\r\n                        value={ inputValue }\r\n                        onChange= { handleInputChange }\r\n                    />\r\n                    <button onClick={ handleSubmit } className=\"focus:outline-none\"><i className=\"fa fa-plus text-gray-500\"></i></button>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddCategory;\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async ( category ) => {\r\n    \r\n    const  url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=5zTJSg5xPQ9J0FvwYE0Lg3rjH7DwkRno`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n\r\n   return gifs;\r\n}\r\n\r\n","import React from 'react';\r\n\r\nconst GifGridItem = ( {id, title, url}) => {\r\n\r\n    return(\r\n            <div className=\"md:flex p-4 rounded overflow-hidden shadow-lg m-6 animate__animated animate__fadeInDownBig\">\r\n                <div className=\"md:flex-shrink-0\">\r\n                    <img className=\"rounded-lg md:w-56\" src={ url }/>\r\n                </div>\r\n\r\n                <div className=\"mt-4 md:mt-0 md:ml-6\">\r\n                    <a href={url} className=\"uppercase block mt-1 text-lg text-gray-900 hover:underline font-bold\">{ title }</a>\r\n                </div>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\nexport default GifGridItem;","import React  from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n    const { data, loading } = useFetchGifs( category );\r\n\r\n    \r\n\r\n    return(\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeInLeftBig\">{ category }</h3>\r\n\r\n            { loading && <p>Cargando</p>}\r\n\r\n             {\r\n                data.map( img => (\r\n            \r\n                    <GifGridItem \r\n                        key= {img.id}\r\n                        {...img}\r\n                    />\r\n                ))\r\n            }\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( ()=> {\r\n\r\n        getGifs( category ).then( imgs =>  {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n\r\n        });\r\n\r\n    }, [ category ]);\r\n\r\n    return state;\r\n\r\n}","import { Fragment } from \"react\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <Fragment>\r\n            \r\n            <nav className=\"border-b md:flex md:items-center md:justify-between p-4 pb-0 shadow-lg md:pb-4\">\r\n                \r\n                <div className=\"flex items-center justify-between mb-4 md:mb-0\">\r\n                \r\n                    <h1 className=\"leading-none text-2xl text-grey-darkest\">\r\n                        \r\n                            GifExpertApp\r\n\r\n                    </h1>\r\n                \r\n                </div>\r\n            \r\n            </nav>\r\n        \r\n        </Fragment>\r\n        \r\n    );\r\n}\r\n\r\nexport default Header;","import { Fragment, useState } from \"react\";\r\nimport AddCategory from \"./AddCategory\";\r\nimport GifGrid from \"./GifGrid\";\r\nimport Header from \"./Header\";\r\n\r\nconst GifExpertApp = () => {\r\n    \r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     // setCategories( ['HunterxHunter', ...categories]);\r\n    //     setCategories( cats => [...cats, 'HunterxHunter']);\r\n    // }\r\n    \r\n    return(\r\n        <Fragment>\r\n            <Header />\r\n            <div className='container flex flex-col items-center justify-center my-12 p-12 bg-white text-gray-900 antialiased'>\r\n        \r\n                <AddCategory setCategories={ setCategories }/>\r\n                <hr></hr>\r\n                <ol>\r\n                    { \r\n                        categories.map( category  => (\r\n                            <GifGrid \r\n                                key = { category }\r\n                                category = { category }\r\n                            />\r\n                        ))\r\n                    }\r\n                </ol>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GitExpertApp';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}